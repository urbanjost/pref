NAME
   prep(1) - [DEVELOPER] pre-process FORTRAN source files
   (LICENSE:MIT)

SYNOPSIS
   prep  [[-D] define_list]
         [-I include_directories]
         [-i input_file(s)]
         [-o output_file]
         [-system]
         [-verbose]
         [-prefix character|ADE]
         [-keeptabs]
         [-noenv]
         [-width n]
         [-d ignore|remove|blank]
         [-comment default|doxygen|ford|none]
         [-version]
         [-help]
OPTIONS
   define_list, -D define_list  An optional space-delimited list of expressions
                                used to define variables before file processing
                                commences.
   -i input_files               The default input file is stdin. Filenames are
                                space-delimited. In a list, @ represents stdin.
   -o output_file               The default output file is stdout.
   -I include_directories       The directories to search for files specified on
                                $INCLUDE directives.
   -prefix ADE|letter  The default directive prefix character is "$".
                       Alternatives may be specified by providing an
                       ASCII Decimal Equivalent (Common values are 37=%
                       42=* 35=# 36=$ 64=@). If the value is not numeric
                       it is assumed to be a literal character.

   -help            Display documentation and exit.
   -verbose         All commands on a $SYSTEM directive are echoed
                    to stderr with a + prefix. Text following the
                    string "@(#)" is printed to stderr similar to
                    the Unix command what(1) but is otherwise
                    treated as other text input.

   -noenv           The $IFDEF and $IFNDEF directives test for an
                    internal prep(1) variable and then an
                    environment variable by default. This option
                    turns off testing for environment variables.
   -system          Allow system commands on $SYSTEM directives to
                    be executed.
   -keeptabs        By default tab characters are expanded assuming
                    a stop has been set every eight columns; and
                    trailing carriage-return characters are removed.
                    Use this flag to prevent this processing from
                    occurring.
   -comment         try to style comments generated in $BLOCK blocks
                    for other utilities such as doxygen. Default is to
                    prefix lines with '! '. Allowed keywords are
                    currently "default", "doxygen","none","ford".
                    THIS IS AN ALPHA FEATURE AND NOT FULLY IMPLEMENTED.
   -d ignore|remove|blank  Enable special treatment for lines beginning
                           with "d" or "D" The letter will be left as-is
                           (the default); removed; or replaced with a blank
                           character. This non-standard syntax has been
                           used to support the optional compilation of
                           "debug" code by many Fortran compilers when
                           compiling fixed-format Fortran source.
   -version         Display version and exit
   -width n         Maximum line length of the output file. Default
                    is 1024. Typically used to trim fixed-format
                    FORTRAN code that contains comments or "ident"
                    labels past column 72 when compiling
                    fixed-format Fortran code.
DEFINITION

   By default the stand-alone pre-processor prep(1) will interpret lines with
   "$" in column one, and will output no such lines. Other input is
   conditionally written to the output file based on the directives encountered
   in the input.

   The syntax for the control lines is as follows:

     $DEFINE   variable_name[=expression]                 [! comment ]
     $UNDEFINE variable_name                              [! comment ]
     $IF       {LOGICAL or INTEGER expression}            [! comment ]
      or
     $IFDEF    {variable_name}                            [! comment ]
      or
     $IFNDEF   {variable_name}                            [! comment ]
               { sequence of source statements}
     [$ELSEIF  {LOGICAL or INTEGER expression}            [! comment ]
               { sequence of source statements}]
     [$ELSE                                               [! comment ]
               { sequence of source statements}]
     $ENDIF                                               [! comment ]
     $PARCEL   [name]                                     [! comment ]
     $POST     name                                       [! comment ]
     $OUTPUT   filename  [-append]                        [! comment ]
     $INCLUDE  filename                                   [! comment ]
     $BLOCK    [comment|null|write|help|version]|
               [variable [-varname NAME]]
               [-file NAME [-append]]                     [! comment ]
     $PRINTENV predefined_name|environment_variable_name  [! comment ]
     $SHOW                                                [! comment ]
     $SYSTEM system_command                               [! comment ]
     $IDENT    metadata                                   [! comment ]
     $@(#)     metadata                                   [! comment ]
     $MESSAGE  message_to_stderr
     $STOP {stop_value}                                   [! comment ]

   Compiler directives are specified by a "$" in column one, followed by a
   keyword.

   An exclamation character on a valid directive begins an in-line comment
   that is terminated by an end-of-line.

   Any LOGICAL expression composed of integer constants, parameters
   and operators, is valid. Operators are

     .NOT.  .AND.  .OR.  .EQV.  .NEQV.  .EQ.  .NE.  .GE.
     .GT.   .LE.   .LT.  +      -       *     /     (
     )      **

   DIRECTIVES

   $DEFINE variable_name [=expression]

   A $DEFINE may appear anywhere in a source file. If the value is ".TRUE."
   or ".FALSE." then the parameter is of type LOGICAL, otherwise the
   parameter is of type INTEGER and the value must be an INTEGER. If no
   value is supplied, the parameter is of type INTEGER and is given the
   value 1.

   Constant parameters are defined from the point they are encountered in a
   $DEFINE directive until program termination unless explicitly
   undefined with a $UNDEFINE directive.

   Example:

    $define A=1
    $define B=1
    $define C=2
    $if ( A + B ) / C .eq. 1
       (a+b)/c is one
    $endif

   $IF/$ELSEIF/$ELSE/$ENDIF directives

   Each of the control lines delineates a block of FORTRAN source. If the
   expression following the $IF is ".TRUE.", then the lines of FORTRAN
   source following are output. If it is ".FALSE.", and an $ELSEIF
   follows, the expression is evaluated and treated the same as the $IF. If
   the $IF and all $ELSEIF expressions are ".FALSE.", then the lines of
   source following the $ELSE are output. A matching $ENDIF ends the
   conditional block.

   $IFDEF/$IFNDEF directives

   $IFDEF and $IFNDEF are special forms of the $IF directive that simply test
   if a variable name is defined or not. Essentially, these are equivalent:

     $IFDEF varname  ==> $IF DEFINED(varname)
     $IFNDEF varname ==> $IF .NOT. DEFINED(varname)

   except that environment variables are tested as well if the -noenv option
   is not specified.

   $IDENT metadata [-language fortran|c|shell]

   Writes a line using SCCS-metadata format of the following forms:

     language:
     fortran   character(len=*),parameter::ident="@(#)metadata"
     c         #ident "@(#)metadata"
     shell     #@(#) metadata

   This string is generally included for use with the what(1) command.

   The default language is fortran. Depending on your compiler, the
   optimization level used when compiling, these strings may or may not
   remain in the object files and executables created.

   Do not use the characters double-quote, greater-than, backslash (">\)
   in the metadata; do not use strings starting with " -" either.

   $INCLUDE filename

   Nested read of specified input file. Fifty (50) nesting levels are allowed.

   $PRINTENV name

   If the name of an uppercase environment variable is given the value
   of the variable will be placed in the output file. If the value is a
   null string or if the variable is undefined output will be stopped.
   This allows the system shell to generate code lines. This is usually
   used to pass in information about the compiler environment. For
   example:

     # If the following command were executed in the bash(1) shell...

      export STAMP="      write(*,*)''COMPILED ON:`uname -s`;AT `date`''"

   the environment variable STAMP would be set to something like

     write(*,*)''COMPILED ON:Eureka;AT Wed, Jun 12, 2013  8:12:06 PM''

   A version number would be another possibility

     export VERSION="      program_version=2.2"

   Special predefined variable names are:

     Variable Name      Output
     PREP_DATE  ......  PREP_DATE="12:58 14Jun2013"
     Where code is assumed to have defined PREP_DATE as CHARACTER(LEN=15)
     PREP_FILE  ......  PREP_FILE="current filename"
     Where code is assumed to have defined PREP_FILE as CHARACTER(LEN=1024)
     PREP_LINE  ......  PREP_LINE=    nnnnnn
     Where code is assumed to have defined PREP_LINE as INTEGER

   $BLOCK [comment|null|write|help|version  [-file NAME [-append]]
     or
   $BLOCK VARIABLE -varname NAME  [-file NAME]

      COMMENT:   write text prefixed by an exclamation and a space
      WRITE:     write text as Fortran WRITE(3f) statements
                 The Fortran generated is free-format. It is assumed to the
                 output will not generate lines over 132 columns.
      HELP:      write text as a subroutine called HELP_USAGE
      VERSION:   write text as a subroutine called HELP_VERSION
                 prefixing lines with @(#) for use with the what(1) command.
      NULL:      Do not write into current output file
      VARIABLE:  write as a text variable. The name may be defined using the
                 -varname switch. Default name is "textblock".
      END:       End block of specially processed text

   If the "-file NAME" option is present the *unaltered* text is written to
   the specified file. This allows documentation to easily be maintained in
   the source file. It can be tex, html, markdown or any plain text.
   The filename will be prefixed with $PREP_DOCUMENT_DIR/doc/ if the
   environment variable $PREP_DOCUMENT_DIR is not set the option is ignored.

   The text can easily be processed by other utilities such as markdown(1)
   or txt2man(1) to produce man(1) pages and HTML documents. $SYSTEM commands
   may follow the $BLOCK block text to optionally post-process the doc files.

   A blank value or "END" returns to normal  output processing.

   $SHOW

   Shows current state of prep(1); including variable names and values; and
   the name of the current input files. All output is preceded by an
   exclamation character.

   Example:

    prep A=10 B C D -o paper
    $define z=22
    $show
    $stop

    !======================================================================
    ! *prep* CURRENT STATE
    ! *prep*    TOTAL LINES READ ............          2
    ! *prep*    CONDITIONAL_NESTING_LEVEL....   0
    ! *prep*    DATE......................... 11:18 21Jun2013
    ! *prep*    ARGUMENTS ................... A=10 B C D -o paper
    ! *prep* VARIABLES:
    ! *prep*    ! A                               !          10
    ! *prep*    ! B                               !           1
    ! *prep*    ! C                               !           1
    ! *prep*    ! D                               !           1
    ! *prep*    ! Z                               !          22
    ! *prep* OPEN FILES:
    ! *prep*    ! ---- ! UNIT ! LINE NUMBER ! FILENAME
    ! *prep*    !    1 !    5 !           2 !
    !======================================================================

   $STOP stop_value

   Stops input file processing. An optional integer value of 0 to 20
   will be returned as a status value to the system where supported. A
   value of two ("2") is returned if no value is specified. Any value
   from one ("1") to twenty ("20") also causes an implicit execution of
   the "$SHOW" directive before the program is stopped. A value of "0"
   causes normal program termination.

   $SYSTEM system_command

   If system command processing is enabled using the --system switch system
   commands can be executed for such tasks as creating files to be read or to
   further process documents created by $BLOCK. $SYSTEM directives are ignored
   by default; as you clearly need to ensure the input file is trusted before
   before allowing commands to be executed. Commands that are system-specific
   may need to be executed conditionally as well.

   Examples:

    $! build variable definitions using GNU/Linux commands
    $SYSTEM echo system=`hostname` > compiled.h
    $SYSTEM echo compile_time="`date`" >> compiled.h
    $INCLUDE compiled.h

    $! obtain up-to-date copy of source file from HTTP server:
    $SYSTEM wget http://repository.net/src/func.F90 -O -|
    cpp -P -C -traditional >_tmp.f90
    $INCLUDE _tmp.f90
    $SYSTEM  rm _tmp.f90

   $UNDEFINE variable_name

   A symbol defined with $DEFINE can be removed with the $UNDEFINE
   directive.

   DEFINED(variable_name)

   A special function called DEFINED() may appear only in a $IF or $ELSEIF.
   If "variable_name" has been defined at that point in the source code,
   then the function value is ".TRUE.", otherwise it is ".FALSE.". A name is
   defined only if it has appeared in the source previously in a $DEFINE
   directive or been declared on the command line.
   The names used in compiler directives are district from names in the
   FORTRAN source, which means that "a" in a $DEFINE and "a" in a FORTRAN
   source statement are totally unrelated.
   The DEFINED() parameter is NOT valid in a $DEFINE directive.

   Example:

    >        Program test
    > $IF .NOT. DEFINED (inc)
    >        INCLUDE ''comm.inc''
    > $ELSE
    >        INCLUDE ''comm2.inc''
    > $ENDIF
    >        END

   The file, "comm.inc" will be INCLUDEd in the source if the parameter,
   "inc", has not been previously defined, while INCLUDE "comm2.inc" will
   be included in the source if "inc" has been previously defined. This is
   useful for setting up a default inclusion.

   $MESSAGE WARNING message

   Write message to stderr

LIMITATIONS

   $IF constructs can be nested up to 20 levels deep. Note that using
   more than two levels typically makes input files less readable.

   $BLOCK END is required after a $BLOCK or -file FILENAME is not written.

   Nesting of $BLOCK sections not allowed.

   Messages for $MESSAGE do not treat an exclamation as starting a comment

  Input files

   o lines are limited to 1024 columns. Text past column 1024 is ignored.
   o files currently opened cannot be opened again.
   o a maximum of 50 files can be nested by $INCLUDE
   o filenames cannot contain spaces on the command line.

 Variable names

   o cannot be redefined unless first undefined.
   o are limited to 31 characters.
   o must start with a letter (A-Z).
   o are composed of the letters A-Z, digits 0-9 and _ and $.
   o 2048 variable names may be defined at a time.

Major cpp(1) features not present in prep:

   There are no predefined preprocessor symbols. Use a directive input file
   instead. The predefined variables such as PREP_DATE can be used as a
   substitute in some cases.

   This program does not provide string (macro) substitution in output
   lines. See cpp(1) and m4(1) and related utilities if macro expansion is
   required.

EXAMPLES

  Define variables on command line:

   Typically, variables are defined on the command line when prep(1) is invoked
   but can be grouped together into small files that are included with a
   $INCLUDE or as input files.

     prep HP size=64 -i hp_directives.dirs @ test.F90 -o test_out.f90

   defines variables HP and SIZE as if the expressions had been on a $DEFINE
   and reads file "hp_directives.dirs" and then stdin and then test.F90.
   Output is directed to test_out.f90

  Basic conditionals:

   >$! set value of variable "a" if it is not specified on the prep(1) command.
   >$IF .NOT.DEFINED(A)
   >$   DEFINE a=1  ! so only define the following first version of SUB1(3f)
   >$ENDIF
   >program conditional_compile
   >   use M_kracken95, only : kracken, lget
   >   ! use M_kracken95 module to crack command line arguments
   >   call kracken("cmd","-help .false. -version .false.")
   >   ! call routine generated by $BLOCK HELP
   >   call help_usage(lget("cmd_help"))
   >   ! call routine generated by $BLOCK VERSION
   >   call help_version(lget("cmd_version"))
   >   call sub1()
   >end program conditional_compile
   >! select a version of SUB1 depending on the value of prep(1) variable "a"
   >$IF a .EQ. 1
   >subroutine sub1
   >   print*, "This is the first SUB1"
   >end subroutine sub1
   >$ELSEIF a .eq. 2
   >subroutine sub1
   >   print*, "This is the second SUB1"
   >end subroutine sub1
   >$ELSE
   >subroutine sub1
   >   print*, "This is the third SUB1"
   >end subroutine sub1
   >$ENDIF
   >$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   >$! generate help_usage() procedure (and file to run thru txt2man(1) or other
   >$! filters to make man(1) page if $PREP_DOCUMENT_DIR is set).
   >$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   >$BLOCK HELP -file conditional_compile.man
   >NAME
   >    conditional_compile - basic example for prep(1) pre-processor.
   >SYNOPSIS
   >    conditional_example [--help] [--version]
   >DESCRIPTION
   >    This is a basic example program showing how documentation can be used
   >    to generate program help text
   >OPTIONS
   >       --help
   >              display this help and exit
   >       --version
   >              output version information and exit
   >$BLOCK END
   >$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   >$! generate help_version() procedure
   >$BLOCK VERSION
   >DESCRIPTION: example program showing conditional compilation with prep(1)
   >PROGRAM:     conditional_compile
   >VERSION:     1.0, 20160703
   >AUTHOR:      John S. Urban
   >$BLOCK END
   >$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

 MIXING BLOCK AND PRINTENV

   This example shows one way how an environment variable can be turned
   into a write statement

     $block write
     $ifdef HOME
     $printenv HOME
     $else
        HOME not defined
     $endif
     $block end

   Sample output

     write(io,'(a)')'/home/urbanjs/V600'

AUTHOR
   John S. Urban

LICENSE
   MIT

